<?php

/**
 * @file
 * Engine: parsers, default.
 */

// Often we need to fake a version for Composer.
define("M2C_FAKE_VERSION", "1.x-dev");

/**
 * Parse a makefile into the internal format provided by make.
 */
function m2c_parsers_default_internal($makefile) {
  drush_include_engine("hacks", "make");

  // Parse .info file into nested arrays.
  $make_info = make_parse_info_file($makefile);

  // Convert this nested arrays into an internal format, at the same time
  // looking up any metadata for all projects for which it is missing.
  $internal_make_info = _make_projects_hacked(FALSE, "/tmp", $make_info, "/tmp", "/tmp");
  // Merge libraries in
  $internal_make_info['libraries'] = _make_libraries_hacked("/tmp", $make_info, "/tmp", "/tmp");

  return $internal_make_info;
}

/**
 * Parse internal make format into composer
 */
function m2c_parsers_default_m2c($internal_make_info) {

  // Start composer file.
  $composer = array();

  if (!empty(drush_get_option('name'))) {
    $composer['name'] = drush_get_option('name');
  }

  if (!empty(drush_get_option('type'))) {
    $composer['type'] = drush_get_option('type');
  }

  $composer += array(
    'require' => array(
      'composer/installers' => '~1.0',
      "cweagans/composer-patches" => "~1.0",
    ),
    'minimum-stability' => 'dev',
    'prefer-stable' => TRUE,
    'repositories' => array(
      array(
        "type" => "composer",
        "url" => "https://packages.drupal.org/7",
      ),
    ),
    'config' => array(
      'secure-http' => true,
    ),
  );

  foreach($internal_make_info as $supertype => $packages) {
    switch($supertype) {
      case "contrib":
      case "core":
        foreach($packages as $name => $package) {
          // Package version can be empty, even after autodiscovery.
          if ($package["version"] == "" && !empty($package['download']['full_version'])) {
            $package["version"] = str_replace($package["core"] . "-", "", $package['download']['full_version']);
          }

          // Composer cannot make sense of -unstable tags.
          if (strpos($package["version"], "unstable") !== FALSE) {
            $package['version'] = str_replace("-unstable", "." . M2C_FAKE_VERSION . ".", $package['version']);
            drush_log(dt(
              "Package !p: replaced -unstable with !v for Composer compatibility; should not affect actual download.",
              array("!p" => $name, "!v" => M2C_FAKE_VERSION)
            ), "ok");
          }

          // Finally, if we really don't have a package version, make one up.
          $version = $package['version'];
          if (!$version) {
            $version = M2C_FAKE_VERSION;
            drush_log(dt(
              "Package !p: replaced empty version with !v for Composer compatibility; should not affect actual download.",
              array("!p" => $name, "!v" => M2C_FAKE_VERSION)
            ), "ok");
          }

          // Assemble a composer package structure.
          $version = isset($package['download']['branch']) ? str_replace("7.x-", "", $package['download']['branch']) . "-dev" : $version;
          $version = isset($package['download']['revision']) ? $version . "#" . $package['download']['revision'] : $version;
          $version = strpos($version, 'dev') !== false ? $version : preg_replace('/([0-9]*\.[0-9]*)(.*)/', '\1.0\2', $version);
          $composer_package = array(
            "name" => "drupal/$name",
            "type" => "drupal-" . $package['type'],
            // Version not always defined in original makefile; we can't use "core",
            // because Composer version numbers cannot end ".x".
            "version" => $version,
          );

          // Get dist/source based on download method.
          $composer_package += _m2c_map_download_to_composer_dist($package['download'], $package);

          // Allow http if needed.
          if (isset($composer_package['download']['url']) && strpos($composer_package['download']['url'], 'http://') !== false) {
            $composer['config']['secure-http'] = false;
          }

          if (drush_get_option('add-drupal-repositories') || !_m2c_repository_is_drupal($composer_package)) {
            // Put package in as a package repository.
            $composer['repositories'][] = array(
              "type" => "package",
              "package" => $composer_package,
            );
          }
          // Then reference it as a requirement, matching the package version.
          $composer['require'][$composer_package['name']] = $composer_package['version'];
        }
        break;

      case "libraries":
        foreach($packages as $name => $package) {
          // Libraries have no version that Drupal cares about.
          $package['version'] = "1.0";

          // Assemble a composer package structure.
          $composer_package = array(
            "name" => "library/$name",
            "version" => $package['version'],
            // Hardwire this, just in case it's omitted.
            "type" => "drupal-library",
          );
          $composer_package += _m2c_map_download_to_composer_dist($package['download']);

          // Put package in as a package repository, avoiding name clash
          // with any Drupal projects e.g. colorbox, flexslider etc.
          $composer['repositories']["libraries/$name"] = array(
            "type" => "package",
            "package" => $composer_package,
          );
          $composer['require'][$composer_package['name']] = $composer_package['version'];
        }
        break;

      default:
        drush_log("Didn't deal with make section $supertype", "warning");
    }
    // Process patches for all types.
    foreach ($packages as $name => $package) {
      if (!empty($package['patch'])) {
        foreach ($package['patch'] as $patch_name => $patch_url) {
          // Fix old http URLs
          $patch_url = preg_replace('~^http://www.drupal.org/~', 'https://www.drupal.org/', $patch_url);
          $composer['extra']['patches']["drupal/$name"][$patch_name] = $patch_url;
          // Allow http if needed.
          if (strpos($patch_url, 'http://') !== false) {
            $composer['config']['secure-http'] = false;
          }
        }
      }
    }
  }

  return $composer;
}

function _m2c_repository_is_drupal($composer_package) {
  $url = !empty($composer_package['source']['url']) ? $composer_package['source']['url']
    :(!empty($composer_package['dist']['url']) ? $composer_package['dist']['url'] : NULL);
  return $url && preg_match('~^[a-z]*://[a-z]+.drupal.org/~', $url);
}

/**
 * Helper function to map a download array to a composer source/dist.
 *
 * @param array $download
 *   the download array from the makefile package
 * @param array $package
 *   optional array of full package data, where autodiscovery is still required.
 *
 * @return array
 *   dist/source data for composer.
 */
function _m2c_map_download_to_composer_dist($download, $package = NULL) {
  $url = "";
  foreach(array("url", "download_link") as $key) {
    if (array_key_exists($key, $download)) {
      $url = $download[$key];
    }
  }

  // Without a download type, just assume HTTP GET.
  if (!isset($download['type'])) {
    $download['type'] = "get";
  }

  switch($download['type']) {
    // Drush pm always returns a tar.gz file.
    case "pm":
      // "tar" basically covers .tar, .tar.gz and .tgz, which is convenient
      // here but causes some problems below (see MIME type guessing.)
      return array(
        "dist" => array(
          "url" => $url,
          "type" => "tar",
        ),
      );

    // Standard HTTP GET.
    case "get":
      // Try to autodetect from the URL.
      $type = NULL;
      foreach (array("tar.gz" => "tar", ".tgz" => "tar", ".gz" => "gzip", ".zip" => "zip") as $zip_suffix => $zip_type) {
        if (strpos(strrev($url), strrev($zip_suffix)) === 0) {
          $type = $zip_type;
          break;
        }
        else {
          $type = "file";
        }
      }

      // If we're no wiser - some URLs end /download - try a HTTP request.
      if ($type === NULL) {
        drush_shell_exec("curl --fail -s -L --connect-timeout 30 -I %s | grep 'Content-Type:'", $url);
        $matches = drush_shell_exec_output();
        if ($matches) {
          // Sadly we can't tell the difference between a gzipped tar and a
          // straight gzipped file - we assume the former as it's what d.o
          // assumes. Gzipping a single file is much rarer anyway.
          foreach (array("gzip" => "tar", "zip" => "zip") as $mime => $zip_type) {
            if (strpos($matches[0], "application/$mime")) {
              $type = $zip_type;
              break;
            }
          }
        }
      }

      // Assume "zip"
      return array(
        "dist" => array(
          "url" => $url,
          "type" => $type ? $type : "zip",
        ),
      );

    case "file":
      // Does Composer even have a "file" dist type?
      return array(
        "dist" => array(
          "url" => $url,
          "type" => "file",
        ),
      );


    case "git":
      // Work out the git reference, in Drush-make precedence order.
      $reference = "master";
      foreach (array("tag", "branch", "revision") as $commitish) {
        if (isset($download[$commitish])) {
          $reference = $download[$commitish];
          break;
        }
      }

      // Auto-guess a URL if none given, asssuming it's a Drupal project.
      if (!$url && isset($package)) {
        $url = "http://git.drupal.org/project/" . $package['name'] . ".git";
      }

      // => git.
      return array(
        "source" => array(
          "url" => $url,
          "type" => "git",
          "reference" => $reference,
        ),
      );

    default:
      // Report error as an exception.
      $type = $download['type'];
      unset($download['type']);
      throw new Exception(
        "Unknown make download type $type; more info: " . var_export($download, TRUE)
      );
  }
}
